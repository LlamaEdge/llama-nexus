name: Test Server

on:
  push:
    branches:
      - dev
      - main
      - release-*
      - feat-*
      - ci-*
      - refactor-*
      - fix-*
      - test-*
    paths:
      - ".github/workflows/test_server.yml"
      - "**/Cargo.toml"
      - "**/*.rs"
      - "**/*.sh"
      - "**/.cargo/config.toml"
      - "tests/*.hurl"
  pull_request:
    branches:
      - dev
      - main
    types: [opened, synchronize, reopened]
    paths:
      - ".github/workflows/**"
      - "**/Cargo.toml"
      - "**/*.rs"
      - "**/*.sh"
      - "tests/*.hurl"

jobs:
  test-llama-nexus-ubuntu:
    runs-on: ubuntu-latest
    env:
      LLAMAEDGE_VERSION: "0.22.1"
    strategy:
      matrix:
        wasmedge_version: [0.14.1]
        ggml_version: [b5640]
        whisper_api_server_version: [0.4.1]
    steps:
      - name: Clone project
        id: checkout
        uses: actions/checkout@v3

      - name: Install Rust-nightly
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-wasip1
          components: rustfmt, clippy

      - name: Install Rust-stable
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: wasm32-wasip1

      - name: Install WasmEdge
        run: |
          curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s -- -v ${{ matrix.wasmedge_version }} --ggmlbn=${{ matrix.ggml_version }}
          ls -al $HOME/.wasmedge/bin

      - name: Install Hurl
        run: |
          curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/5.0.1/hurl_5.0.1_amd64.deb
          sudo apt update && sudo apt install ./hurl_5.0.1_amd64.deb

      - name: Build LlamaEdge-Nexus
        run: |
          cargo build --release
          cp target/release/llama-nexus ./llama-nexus

      # - name: Build llama-api-server.wasm
      #   env:
      #     RUSTFLAGS: "--cfg wasmedge --cfg tokio_unstable"
      #   run: |
      #     git clone -b dev https://github.com/LlamaEdge/LlamaEdge.git
      #     cd LlamaEdge
      #     cargo build --release
      #     cp target/wasm32-wasip1/release/llama-api-server.wasm ../llama-api-server.wasm
      #     cd -

      - name: Download LlamaEdge
        run: |
          curl -LO https://github.com/LlamaEdge/LlamaEdge/releases/download/${{ env.LLAMAEDGE_VERSION }}/llama-api-server.wasm
          ls -al

      - name: Deploy whisper plugin
        run: |
          mkdir -p $HOME/whisper/plugin
          cd $HOME/whisper/plugin
          curl -LO https://github.com/WasmEdge/WasmEdge/releases/download/${{ matrix.wasmedge_version }}/WasmEdge-plugin-wasi_nn-whisper-${{ matrix.wasmedge_version }}-ubuntu20.04_x86_64.tar.gz
          tar -xzvf WasmEdge-plugin-wasi_nn-whisper-${{ matrix.wasmedge_version }}-ubuntu20.04_x86_64.tar.gz
          cd -
          ls -al $HOME/whisper/plugin

      - name: Start llama-api-server
        run: |
          curl -LO https://huggingface.co/second-state/Llama-3.2-1B-Instruct-GGUF/resolve/main/Llama-3.2-1B-Instruct-Q4_0.gguf
          nohup $HOME/.wasmedge/bin/wasmedge --dir .:. --nn-preload default:GGML:AUTO:Llama-3.2-1B-Instruct-Q4_0.gguf llama-api-server.wasm --model-name Llama-3.2-1B --prompt-template llama-3-chat --ctx-size 4096 --port 9068 > ./chat-server.log 2>&1 &
          sleep 15
          cat chat-server.log

      - name: Start whisper-api-server
        run: |
          curl -LO https://github.com/LlamaEdge/whisper-api-server/releases/download/${{ matrix.whisper_api_server_version }}/whisper-api-server.wasm
          curl -LO https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v2-q5_0.bin
          nohup env WASMEDGE_PLUGIN_PATH=$HOME/whisper/plugin $HOME/.wasmedge/bin/wasmedge --dir .:. whisper-api-server.wasm -m ggml-large-v2-q5_0.bin --port 9069 > ./whisper-server.log 2>&1 &
          sleep 15
          cat whisper-server.log

      - name: Start LlamaEdge-Nexus
        run: |
          nohup ./llama-nexus --log-destination file --log-file llama-nexus.log > ./start-llama-nexus.log 2>&1 &
          sleep 5
          cat start-llama-nexus.log

      - name: Register llama-api-server
        run: |
          curl --location 'http://localhost:3389/admin/servers/register' --header 'Content-Type: application/json' --data '{"url": "http://localhost:9068","kind": "chat"}'
          sleep 5

      - name: Register whisper-api-server
        run: |
          curl --location 'http://localhost:3389/admin/servers/register' --header 'Content-Type: application/json' --data '{"url": "http://localhost:9069","kind": "translate,transcribe"}'
          sleep 5

      - name: Print LlamaEdge-Nexus logs on failure
        if: failure()
        run: |
          echo "LlamaEdge-Nexus logs:"
          cat start-llama-nexus.log

      - name: Run test_chat.hurl
        run: |
          hurl --test --jobs 1 ./tests/test_chat.hurl

      - name: Print chat-server.log
        if: failure()
        run: |
          cat chat-server.log

      - name: Run test_transcribe.hurl
        if: always()
        run: |
          cp ./tests/assets/test.wav ./tests/test.wav
          hurl --test --jobs 1 ./tests/test_transcribe.hurl

      - name: Print whisper-server.log on failure
        if: failure()
        run: |
          echo "Whisper server logs:"
          cat ./whisper-server.log

      - name: Run test_translate.hurl
        if: always()
        run: |
          cp ./tests/assets/test_cn.wav ./tests/test_cn.wav
          hurl --test --jobs 1 ./tests/test_translate.hurl

      - name: Print whisper-server.log on failure
        if: failure()
        run: |
          echo "Whisper server logs:"
          cat ./whisper-server.log

      - name: Stop LlamaEdge-Nexus
        run: |
          pkill -f llama-nexus

      - name: Stop llama-api-server and whisper-api-server
        run: |
          pkill -f wasmedge
